model: {
  second: {
    network_class_name: "VoxelNetBaiduMultiHead"
    voxel_generator {
      # point_cloud_range : [0, -40, -3, 70.4, 40, 1]
      point_cloud_range : [-60, -60, -3, 60, 60, 1]
#     voxel_size : [0.0625, 0.0625, 0.125]
#     voxel_size : [0.05, 0.05, 0.1]
      voxel_size : [0.1, 0.1, 0.1]
      max_number_of_points_per_voxel : 10
    }
    voxel_feature_extractor: {
      module_class_name: "SimpleVoxelRadius"
      num_filters: [16]
      with_distance: false
      num_input_features: 4
    }
    middle_feature_extractor: {
      module_class_name: "SpMiddleFHD"
      # num_filters_down1: [] # protobuf don't support empty list.
      # num_filters_down2: []
      downsample_factor: 8
      num_input_features: 3
    }
    rpn: {
      module_class_name: "RPNNoHead"
      layer_nums: [5, 5]
      layer_strides: [1, 2]
      num_filters: [64, 128]
      upsample_strides: [1, 2]
      num_upsample_filters: [128, 128]
      use_groupnorm: false
      num_groups: 32
      num_input_features: 128
    }
    loss: {
      classification_loss: {
        weighted_sigmoid_focal: {
          alpha: 0.25
          gamma: 2.0
          anchorwise_output: true
        }
      }
      localization_loss: {
        weighted_smooth_l1: {
          sigma: 3.0
          code_weight: [1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0]
        }
      }
      classification_weight: 1.0
      localization_weight: 2.0
    }
    num_point_features: 4 # model's num point feature should be independent of dataset
    # Outputs
    use_sigmoid_score: true
    encode_background_as_zeros: true
    encode_rad_error_by_sin: true
    sin_error_factor: 1.0

    use_direction_classifier: true # this can help for orientation benchmark
    direction_loss_weight: 0.2 # enough.
    num_direction_bins: 2
    direction_limit_offset: 1
    # Loss
    pos_class_weight: 1.0
    neg_class_weight: 1.0

    loss_norm_type: NormByNumPositives
    # Postprocess
    # post_center_limit_range: [0, -40, -2.2, 70.4, 40, 0.8]
    post_center_limit_range: [-60, -60, -3.0, 60, 60, 1]
    nms_class_agnostic: false # only valid in multi-class nms

    box_coder: {
      ground_box3d_coder: {
        linear_dim: false
        encode_angle_vector: false
      }
    }
    target_assigner: {
      class_settings: {
        anchor_generator_range: {
          sizes: [1.78, 4.24, 1.45, 1.37, 1.92, 1.05] # wlh * anchor_number
          anchor_ranges: [-60, -60.0, -1.1, 60, 60, -1.1] # carefully set z center
          rotations: [0, 1.57] # DON'T modify this unless you are very familiar with my code.
        }
        matched_threshold : 0.5
        unmatched_threshold : 0.35
        class_name: "smallMot"

        use_rotate_nms: true
        use_multi_class_nms: false
        nms_pre_max_size: 1000
        nms_post_max_size: 300
        nms_score_threshold: 0.05
        nms_iou_threshold: 0.5
        feature_map_size: [1, 150, 150]

        region_similarity_calculator: {
          nearest_iou_similarity: {
          }
        }

      }
      class_settings: {
        anchor_generator_range: {
          sizes: [2.38, 5.58, 2.35, 2.98, 15.72, 2.98] # wlh * anchor_number
          anchor_ranges: [-60, -60.0, -0.51, 60, 60, -0.51] # carefully set z center
          rotations: [0, 1.57] # DON'T modify this unless you are very familiar with my code.
        }
        matched_threshold : 0.5
        unmatched_threshold : 0.35
        class_name: "bigMot"

        use_rotate_nms: true
        use_multi_class_nms: false
        nms_pre_max_size: 1000
        nms_post_max_size: 300
        nms_score_threshold: 0.05
        nms_iou_threshold: 0.5
        feature_map_size: [1, 150, 150]
        region_similarity_calculator: {
          nearest_iou_similarity: {
          }
        }

      }
      class_settings: {
        anchor_generator_range: {
          sizes: [0.80, 1.71, 1.47] # wlh
          anchor_ranges: [-60, -60.0, -1.13, 60, 60, -1.13] # carefully set z center
          rotations: [0, 1.57] # DON'T modify this unless you are very familiar with my code.
        }
        matched_threshold : 0.35
        unmatched_threshold : 0.2
        class_name: "motorcyclist"

        use_rotate_nms: true
        use_multi_class_nms: false
        nms_pre_max_size: 1000
        nms_post_max_size: 300
        nms_score_threshold: 0.05
        nms_iou_threshold: 0.5
        feature_map_size: [1, 150, 150]
        region_similarity_calculator: {
          nearest_iou_similarity: {
          }
        }

      }

      class_settings: {
        anchor_generator_range: {
          sizes: [0.96, 0.63, 0.44, 1.23, 2.70, 0.55] # wlh * anchor_number
          anchor_ranges: [-60, -60.0, -1.09, 60, 60, -1.09] # carefully set z center
          rotations: [0, 1.57] # DON'T modify this unless you are very familiar with my code.
        }
        matched_threshold : 0.4
        unmatched_threshold : 0.25
        class_name: "others"

        use_rotate_nms: true
        use_multi_class_nms: false
        nms_pre_max_size: 1000
        nms_post_max_size: 300
        nms_score_threshold: 0.05
        nms_iou_threshold: 0.5
        feature_map_size: [1, 300, 300]
        region_similarity_calculator: {
          nearest_iou_similarity: {
          }
        }

      }
      class_settings: {
        anchor_generator_range: {
          sizes: [0.54, 0.52, 1.34] # wlh
          anchor_ranges: [-60, -60.0, -1.25, 60, 60, -1.25] # carefully set z center
          rotations: [0] # DON'T modify this unless you are very familiar with my code.
        }
        matched_threshold : 0.2
        unmatched_threshold : 0.1
        class_name: "pedestrian"

        use_rotate_nms: true
        use_multi_class_nms: false
        nms_pre_max_size: 1000
        nms_post_max_size: 300
        nms_score_threshold: 0.05
        nms_iou_threshold: 0.5
        feature_map_size: [1, 300, 300]
        region_similarity_calculator: {
          nearest_iou_similarity: {
          }
        }

      }

      class_settings: {
        anchor_generator_range: {
          sizes: [0.30, 0.30, 0.84] # wlh
          anchor_ranges: [-60, -60.0, -1.43, 60, 60, -1.43] # carefully set z center
          rotations: [0] # DON'T modify this unless you are very familiar with my code.
        }
        matched_threshold : 0.5
        unmatched_threshold : 0.35
        class_name: "TrafficCone"

        use_rotate_nms: true
        use_multi_class_nms: false
        nms_pre_max_size: 1000
        nms_post_max_size: 300
        nms_score_threshold: 0.05
        nms_iou_threshold: 0.5
        feature_map_size: [1, 300, 300]
        region_similarity_calculator: {
          distance_similarity: {
            distance_norm: 0.7 # match range
            with_rotation: false
            rotation_alpha: 0.0 # rot error contribution
          }
        }

      }


      class_settings: {
        anchor_generator_range: {
          sizes: [0.60, 1.33, 1.45] # wlh
          anchor_ranges: [-60, -60.0, -1.37, 60, 60, -1.37] # carefully set z center
          rotations: [0, 1.57] # DON'T modify this unless you are very familiar with my code.
        }
        matched_threshold : 0.3
        unmatched_threshold : 0.2
        class_name: "bicyclist"

        use_rotate_nms: true
        use_multi_class_nms: false
        nms_pre_max_size: 1000
        nms_post_max_size: 300
        nms_score_threshold: 0.05
        nms_iou_threshold: 0.5
        feature_map_size: [1, 300, 300]
        region_similarity_calculator: {
          nearest_iou_similarity: {
          }
        }

      }

      sample_positive_fraction : -1
      sample_size : 512
      assign_per_class: true
    }
  }
}

train_input_reader: {
  dataset: {
    dataset_class_name: "BaiduDataset"
    kitti_info_path: "/home/chenguang09/workspace/dataset/point_cloud/point_cloud_for_us/caches/train_dataset_info.pkl"
    kitti_root_path: "/home/chenguang09/workspace/dataset/point_cloud/point_cloud_for_us/"
  }
  batch_size: 1
  preprocess: {
    num_workers: 3
    shuffle_points: true
    max_number_of_voxels: 40000
    groundtruth_localization_noise_std: [1.0, 1.0, 0.5]
    groundtruth_rotation_uniform_noise: [-0.3141592654, 0.3141592654]
    # groundtruth_rotation_uniform_noise: [-0.78539816, 0.78539816]
    global_rotation_uniform_noise: [-0.78539816, 0.78539816]
    global_scaling_uniform_noise: [0.95, 1.05]
    global_random_rotation_range_per_object: [0, 0] # pi/4 ~ 3pi/4
    global_translate_noise_std: [0, 0, 0]
    anchor_area_threshold: -1 # very slow if enable when using FHD map (1600x1200x40).
    remove_points_after_sample: true
    groundtruth_points_drop_percentage: 0.0
    groundtruth_drop_max_keep_points: 15
    remove_unknown_examples: false
    sample_importance: 1.0
    random_flip_x: false
    random_flip_y: true
    remove_environment: false
    database_sampler {
      database_info_path: "/home/chenguang09/workspace/dataset/point_cloud/point_cloud_for_us/caches/baidu_dbinfos_train.pkl"
      sample_groups {
        name_to_max_num {
          key: "smallMot"
          value: 15
        }
      }
      sample_groups {
        name_to_max_num {
          key: "bigMot"
          value: 5
        }
      }
      sample_groups {
        name_to_max_num {
          key: "others"
          value: 10
        }
      }
      sample_groups {
        name_to_max_num {
          key: "pedestrian"
          value: 5
        }
      }
      sample_groups {
        name_to_max_num {
          key: "TrafficCone"
          value: 5
        }
      }
      sample_groups {
        name_to_max_num {
          key: "motorcyclist"
          value: 5
        }
      }
      sample_groups {
        name_to_max_num {
          key: "bicyclist"
          value: 5
        }
      }
      database_prep_steps {
        filter_by_min_num_points {
          min_num_point_pairs {
            key: "smallMot"
            value: 5
          }
          min_num_point_pairs {
            key: "bigMot"
            value: 10
          }
          min_num_point_pairs {
            key: "others"
            value: 5
          }
          min_num_point_pairs {
            key: "pedestrian"
            value: 10
          }
          min_num_point_pairs {
            key: "TrafficCone"
            value: 8
          }
          min_num_point_pairs {
            key: "motorcyclist"
            value: 8
          }
          min_num_point_pairs {
            key: "bicyclist"
            value: 8
          }
        }
      }

      database_prep_steps {
        filter_by_difficulty {
          removed_difficulties: [-1]
        }
      }
      global_random_rotation_range_per_object: [0, 0]
      rate: 1.0
    }
  }

}

train_config: {
  optimizer: {
    adam_optimizer: {
      learning_rate: {
        one_cycle: {
          lr_max: 3e-3
          moms: [0.95, 0.85]
          div_factor: 10.0
          pct_start: 0.4
        }
      }
      weight_decay: 0.001
    }
    fixed_weight_decay: true
    use_moving_average: false
  }
  steps: 99040 # 928 * 80
  steps_per_eval: 4640 # 1238 * 5
  save_checkpoints_secs : 1800 # half hour

  #steps: 99040 # 928 * 80
  #steps_per_eval: 6190 # 1238 * 5
  #save_checkpoints_secs : 1800 # half hour
  save_summary_steps : 10
  enable_mixed_precision: false 
  loss_scale_factor: -1
  clear_metrics_every_epoch: true
}

eval_input_reader: {
  dataset: {
    dataset_class_name: "BaiduDataset"
    kitti_info_path: "/home/chenguang09/workspace/dataset/point_cloud/point_cloud_for_us/caches/test_dataset_info.pkl"
    kitti_root_path: "/home/chenguang09/workspace/dataset/point_cloud/point_cloud_for_us/"
  }
  batch_size: 1
  preprocess: {
    max_number_of_voxels: 50000
    shuffle_points: false
    num_workers: 3
    anchor_area_threshold: -1
    remove_environment: false
  }
}
